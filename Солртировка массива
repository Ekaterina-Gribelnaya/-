public class BubbleSort {
    public void sort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - 1 - i; j++) {
                if (array[j] > array[j + 1]) {
                    // swap array[j] and array[j + 1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                }
            }
        }
    }
}
public class QuickSort {
    public void sort(int[] array) {
        quickSort(array, 0, array.length - 1);
    }
    private void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(array, low, high);
            quickSort(array, low, pivotIndex - 1);
            quickSort(array, pivotIndex + 1, high);
        }
    }
    private int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;
        return i + 1;
    }
}
import java.util.Arrays;
import java.util.Random;
public class Main {
    public static void main(String[] args) {
        int smallArraySize = 100;
        int largeArraySize = 10000;
        int[] smallArray = generateRandomArray(smallArraySize);
        int[] largeArray = generateRandomArray(largeArraySize);
        BubbleSort bubbleSort = new BubbleSort();
        QuickSort quickSort = new QuickSort();
        System.out.println("Bubble Sort on Small Array:");
        measureSortingTime(smallArray.clone(), bubbleSort);
        System.out.println("Bubble Sort on Large Array:");
        measureSortingTime(largeArray.clone(), bubbleSort);
        System.out.println("Quick Sort on Small Array:");
        measureSortingTime(smallArray.clone(), quickSort);
        System.out.println("Quick Sort on Large Array:");
        measureSortingTime(largeArray.clone(), quickSort);
    }
    private static int[] generateRandomArray(int size) {
        Random random = new Random();
        int[] array = new int[size];
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(10000);
        }
        return array;
    }
    private static void measureSortingTime(int[] array, Object sorter) {
        long startTime = System.nanoTime();
        if (sorter instanceof BubbleSort) {
            ((BubbleSort) sorter).sort(array);
        } else if (sorter instanceof QuickSort) {
            ((QuickSort) sorter).sort(array);
        }
        long endTime = System.nanoTime();
        long duration = endTime - startTime;
        System.out.println("Time taken: " + duration / 1_000_000.0 + " ms");
    }
}
