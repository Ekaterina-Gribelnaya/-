public class MyQueue<T> {
    // Внутренний класс для представления узла очереди
    private static class QueueNode<T> {
        private T data;
        private QueueNode<T> next; 
        public QueueNode(T data) {
            this.data = data;
        }
    }
    private QueueNode<T> first; // Указатель на первый элемент очереди
    private QueueNode<T> last; // Указатель на последний элемент очереди
    // Метод для добавления элемента в очередь (операция offer)
    public void offer(T item) {
        QueueNode<T> t = new QueueNode<>(item);
        if (last != null) {
            last.next = t;
        }
        last = t;
        if (first == null) {
            first = last;
        }
    }
    // Метод для удаления элемента из очереди (операция poll)
    public T poll() {
        if (first == null) throw new NoSuchElementException();
        T data = first.data;
        first = first.next;
        if (first == null) {
            last = null;
        }
        return data;
    }
    // Метод для просмотра первого элемента очереди без удаления (операция peek)
    public T peek() {
        if (first == null) throw new NoSuchElementException();
        return first.data;
    }
    // Метод для проверки, пуста ли очередь
    public boolean isEmpty() {
        return first == null;
    }
    // Метод для получения текущего размера очереди
    public int size() {
        int size = 0;
        QueueNode<T> current = first;
        while (current != null) {
            size++;
            current = current.next;
        }
        return size;
    }
}
